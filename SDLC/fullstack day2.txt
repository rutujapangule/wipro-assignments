Q.  SDLC Overview -

    1.  Create a one-page infographic that outlines the SDLC phases (Requirements, Design, Implementation, Testing, Deployment), 
      highlighting the importance of each phase and how they interconnect.

ans .    
  infographic :
        
                     requirements
                             ↓
                          design   
                             ↓
                    implementation
                             ↓
                         testing   
                             ↓
                     deployment 
                             
1. requirements :
objective: understand user needs.
importance: foundation for all other phases.
outcome: requirement specification document.

2.design :
objective: plan architecture and interface.
importance: blueprint for development.
outcome: design specification document.

3. implementation :
objective: write and develop software code.
importance: core development phase.
outcome: working software application.

4. testing :
objective: ensure functionality and quality.
importance: identifies and resolves issues.
outcome: tested software ready for deployment.

5. deployment :
objective: deliver and install the software.
importance: makes software operational.
outcome: operational software in user environment.

each phase depends on the previous one. testing may reveal new requirements.
continuous improvement: user feedback post-deployment can restart the cycle.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 2. Develop a case study analyzing the implementation of SDLC phases in a real-world engineering project. 
     Evaluate how Requirement Gathering, Design, Implementation, Testing, Deployment, and Maintenance contribute to project outcomes.

ans. 
 Case Study: Implementing SDLC phases for a "Recipe App" 
SDLC phases :

1. requirement gathering :
 i . surveyed potential users to understand their needs and preferences regarding recipe organization and search functionalities.
ii. conducted market research to identify popular features in existing recipe apps.
defined the scope of the app, including key features and target platforms (iOS and Android).

2. design :
i. created wireframes and mockups to visualize the app's user interface and navigation flow.
ii. defined the database structure for storing recipes and user data.
iii. reviewed design options with stakeholders to gather feedback and make necessary adjustments.

3. implementation :
i. developed the app's front-end and back-end functionalities using appropriate programming 
ii. languages and frameworks.
ii. integrated external APIs for features such as recipe search and image retrieval.
iv. implemented user authentication and data storage mechanisms.

4. testing :
i. conducted unit testing to validate individual app components and functions.
ii. performed integration testing to verify the seamless interaction between different modules.
iii. engaged beta testers to evaluate the app's usability and identify bugs or issues.

5. deployment :
i. prepared the app for deployment on the App Store and Google Play Store, adhering to platform-specific guidelines.
ii. implemented a phased rollout strategy to monitor user feedback and app performance.
iii. provided user support and troubleshooting assistance during the initial launch period.

6. maintenance :
i. implemented a system for monitoring app performance and user engagement metrics.
ii. released regular updates and patches to address user feedback and improve app functionality.
iii. provided ongoing customer support and assistance to address user inquiries and issues.

byy following the SDLC phases, the development team successfully created and launched a recipe app that met user needs and expectations. 
Each phase contributed to the overall success of the project by providing clear direction, facilitating collaboration, ensuring quality, 
and delivering a user-friendly product. The iterative and systematic approach enabled the team to overcome 
challenges and deliver a high-quality app that enhances the cooking experience for users.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3. Research and compare SDLC models suitable for engineering projects. Present findings on Waterfall, Agile, Spiral, and V-Model approaches,
 emphasizing their advantages, disadvantages, and applicability in different engineering contexts.

ans.

1. waterfall model :

advantages:
-simple and easy to understand, making it suitable for small projects with well-defined requirements.
-sequential approach ensures clear documentation and milestones, making it easier to manage and track progress.
-well-suited for projects with stable requirements and low risk of changes.

disadvantages:
-lack of flexibility; difficult to accommodate changes once the development process has begun.
-high risk of late-stage errors or discrepancies due to minimal feedback loops.
-limited stakeholder involvement until the end of the project, potentially leading to misunderstandings or dissatisfaction.

applicability:
ideal for projects with clearly defined requirements and stable technology.
suitable for projects with low to moderate risk and where there is minimal uncertainty.


2. agile model :

advantages:
-highly flexible and adaptive, allowing for iterative development and frequent customer feedback.
-emphasizes collaboration and communication among team members, stakeholders, and customers.
-enables early delivery of working software, providing tangible value to stakeholders and validating requirements.

disadvantages:
-requires active involvement and commitment from stakeholders and customers throughout the project.
-can be challenging to maintain documentation and keep track of changes in dynamic environments.
-may not be suitable for projects with strict regulatory requirements or fixed deadlines.

applicability:
ideal for projects with evolving or unclear requirements, where changes are expected.
well-suited for fast-paced development environments and where customer feedback is essential for success.

3. spiral model :

advantages:
-incorporates risk management into the development process, allowing for early identification and mitigation of potential issues.
-iterative nature allows for progressive elaboration and refinement of requirements and design.
-flexibility to accommodate changes and enhancements throughout the development lifecycle.

disadvantages:
-complex and resource-intensive due to the iterative nature and risk analysis activities.
-requires a high level of expertise in risk management and project planning.
-may not be suitable for small projects or projects with limited resources.

applicability:
well-suited for large and complex projects with high levels of uncertainty and risk.
ideal for projects where requirements are expected to evolve or change over time.


4. v-model :

advantages:
-emphasizes verification and validation throughout the development lifecycle, ensuring higher quality and reliability.
-provides a systematic approach to testing, with testing activities aligned with corresponding development phases.
-well-defined milestones and deliverables, making it easier to manage and track progress.

disadvantages:
-sequential nature may lead to delays in identifying and addressing issues, especially if defects are discovered late in the process.
-limited flexibility to accommodate changes or updates once the development process has begun.
-requires comprehensive documentation and thorough planning, which can be time-consuming and resource-intensive.

applicability:
suitable for projects with stringent quality and regulatory requirements, such as aerospace or medical device development.
ideal for projects where thorough testing and validation are critical for success.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

















